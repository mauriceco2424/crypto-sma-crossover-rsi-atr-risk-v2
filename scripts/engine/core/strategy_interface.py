"""
Strategy Interface Base Class

This file will be generated by the /build-engine command based on the strategy template.
It provides the base interface that all trading strategies must implement.
"""

from abc import ABC, abstractmethod
from typing import Dict, Any, Optional, List
import pandas as pd
import numpy as np
from datetime import datetime


class StrategyInterface(ABC):
    """
    Base interface for all trading strategies.
    
    This class will be generated by /build-engine based on the specific strategy
    requirements defined in the strategy template.
    """
    
    def __init__(self, parameters: Dict[str, Any]):
        """
        Initialize strategy with parameters from parameter_config.md
        
        Args:
            parameters: Dictionary of strategy parameters
        """
        self.parameters = parameters
        self.current_positions = {}
        self.pending_orders = []
        self.last_prices = {}
        
    @abstractmethod
    def generate_signals(self, 
                        current_time: datetime,
                        ohlcv_data: Dict[str, pd.DataFrame],
                        features: Dict[str, pd.DataFrame],
                        portfolio_state: Dict[str, Any]) -> List[Dict[str, Any]]:
        """
        Generate trading signals based on current market data.
        
        Args:
            current_time: Current timestamp in the backtest
            ohlcv_data: OHLCV data for all symbols {symbol: DataFrame}
            features: Calculated features {symbol: DataFrame}
            portfolio_state: Current portfolio state (equity, positions, etc.)
            
        Returns:
            List of signal dictionaries with keys:
            - action: 'buy', 'sell', 'close'
            - symbol: Trading symbol
            - quantity: Optional quantity (if None, use position sizing)
            - order_type: 'market', 'limit'
            - limit_price: For limit orders
            - stop_loss: Optional stop loss price
            - take_profit: Optional take profit price
            - metadata: Additional signal information
        """
        pass
    
    @abstractmethod
    def calculate_position_size(self,
                              signal: Dict[str, Any],
                              portfolio_state: Dict[str, Any],
                              current_price: float) -> float:
        """
        Calculate position size for a given signal.
        
        Args:
            signal: Signal dictionary from generate_signals
            portfolio_state: Current portfolio state
            current_price: Current price of the symbol
            
        Returns:
            Position size in base currency units
        """
        pass
    
    def on_trade_filled(self, 
                       fill_info: Dict[str, Any],
                       portfolio_state: Dict[str, Any]) -> None:
        """
        Called when a trade is filled. Override for custom logic.
        
        Args:
            fill_info: Fill information dictionary
            portfolio_state: Updated portfolio state after fill
        """
        pass
    
    def on_bar_close(self,
                    current_time: datetime,
                    ohlcv_data: Dict[str, pd.DataFrame],
                    portfolio_state: Dict[str, Any]) -> None:
        """
        Called at the end of each bar. Override for custom logic.
        
        Args:
            current_time: Current timestamp
            ohlcv_data: OHLCV data for all symbols
            portfolio_state: Current portfolio state
        """
        pass
    
    def validate_parameters(self) -> bool:
        """
        Validate strategy parameters. Override for custom validation.
        
        Returns:
            True if parameters are valid, False otherwise
        """
        return True
    
    def get_required_features(self) -> List[str]:
        """
        Return list of required feature names.
        
        Returns:
            List of feature names that must be calculated
        """
        return []
    
    def get_warmup_periods(self) -> int:
        """
        Return number of periods needed for strategy warmup.
        
        Returns:
            Number of bars needed before strategy can generate signals
        """
        return 0


class TemplateStrategy(StrategyInterface):
    """
    Template strategy implementation - will be replaced by /build-engine
    """
    
    def generate_signals(self, current_time, ohlcv_data, features, portfolio_state):
        # This is a placeholder - will be generated by /build-engine
        return []
    
    def calculate_position_size(self, signal, portfolio_state, current_price):
        # This is a placeholder - will be generated by /build-engine
        return 0.0